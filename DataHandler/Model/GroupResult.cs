using Newtonsoft.Json;
using System.Collections.Generic;

namespace DataHandler.Model
{

    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using DataHandler.Model;
    //
    //    var groupResult = GroupResult.FromJson(jsonString);

    namespace DataHandler.Model
    {
        using System;
        using System.Collections.Generic;

        using System.Globalization;
        using Newtonsoft.Json;
        using Newtonsoft.Json.Converters;

        public partial class GroupResult
        {
            [JsonProperty("id")]
            public long Id { get; set; }

            [JsonProperty("letter")]
            public string Letter { get; set; }

            [JsonProperty("ordered_teams")]
            public List<Team> OrderedTeams { get; set; }
        }

        public partial class GroupResult
        {
            public static List<GroupResult> FromJson(string json) => JsonConvert.DeserializeObject<List<GroupResult>>(json, DataHandler.Model.Converter.Settings);
        }

        public static class Serialize
        {
            public static string ToJson(this List<GroupResult> self) => JsonConvert.SerializeObject(self, DataHandler.Model.Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }
    }

}
